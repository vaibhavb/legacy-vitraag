The enum package

This is header file that should be included by any applicaition   making use
of the enum package. It contains declarations for all the   exported routines
and structures.

Shaz Qadeer

**********************************************************************

Enum_AtomComputeSetOfPartialInitialStates()
                               Updates the partial initial state to generate
                               all possible                       initial
                               states for the atom.

Enum_AtomComputeSetOfPartialPostStates()
                               Executes an atom on a partial state to generate
                               all   possible partial post states.

Enum_End()                     Ends the enum package.

Enum_Init()                    Initializes the enum package.

Enum_ModuleComputeSetOfInitialStates()
                               Computes the set of initial states of a module.

Enum_ModuleComputeSetOfPostStates()
                               Computes the post set of a state.

Enum_ModulePerformBFS()        Performs a breadth-first search on the state
                               space of                       module.

Enum_ModulePerformDFS()        Performs a depth-first search on the state
                               space of                       module.

Enum_PartialStatePrintToString()
                               Prints the partial state to a string.

Enum_Reinit()                  Reinitializes the enum package.

Enum_StateAlloc()              Allocates a state.

Enum_StateAssignAllVarCombinations()
                               Produces a list of states in which all
                               combinations of                       values to
                               variables in varList have been assigned.

Enum_StateDup()                Returns a duplicate copy of a state.

Enum_StateFreeEventVars()      Frees the event variables of a state.

Enum_StateFreeHistFreeVars()   Frees the history free part of a state.

Enum_StateFree()               Frees a state.

Enum_StateIsVariableAssigned() Checks if a variable in a state has been
                               assigned a                       value.

Enum_StateManagerAddVarInfo()  Adds varInfo of a module to the state manager.

Enum_StateManagerAlloc()       Allocates and initializes a state manager.

Enum_StateManagerFree()        Frees a state manager.

Enum_StateManagerIncrementStateCounter()
                               Increments the state counter.

Enum_StateManagerObtainVarInfoFromModule()
                               Returns the varInfo of a module.

Enum_StateManagerReadStateCounter()
                               Returns the state counter.

Enum_StateManagerReadStateNameTable()
                               Returns the state table.

Enum_StateNameTableAddStateWithNameSuffix()
                               Add a state to the TclHashTable.

Enum_StateNameTableAddState()  Add a state to the TclHashTable.

Enum_StateReadVariableValue()  Reads the value of a variable in a state.

Enum_StateSetParentState()     Sets the parentState field of state.

Enum_StateSetVariableValue()   Sets the value of a variable.

Enum_StateTableAlloc()         Allocates a state table structure.

Enum_StateTableEntryAlloc()    Allocates a state table entry data structure.

Enum_StateTableEntryFree()     Frees a state table entry.

Enum_StateTableFree()          Frees a state table.

Enum_VarInfoAlloc()            Allocates the varInfo data structure of a
                               module.

Enum_VarInfoFree()             Frees a varInfo data structure.

Enum_VarInfoReadEventVars()    Returns the event variables.

Enum_VarInfoReadHistDependVars()
                               Returns the history dependent variables.

Enum_VarInfoReadHistFreeVars() Returns the history free variables.

Enum_VarInfoReadNumEventVars() Returns the number of event variables.

Enum_VarInfoReadNumHistDependVars()
                               Returns the number of history dependent
                               variables.

Enum_VarInfoReadNumHistFreeVars()
                               Returns the number of history free variables.

**********************************************************************



lsList
Enum_AtomComputeSetOfPartialInitialStates(
  Atm_Atom_t *      atom,
  Enum_VarInfo_t *  varInfo,
  Enum_State_t *    partialState
)
  The function returns all possible extensions of the partial state by
  executing the init guarded commands of the atom. If there are no init
  guarded commands all possible evaluations of the non-event controlled
  variables are done. If some guarded command does not specify the initial
  value of a non-event variable, then all possible evaluations are generated.
  The reason for generating all possible combinations of event variables is
  that they would not affect the update of any variable in the next round. If
  no guard is true an empty list is returned.

  Side Effects: None

lsList
Enum_AtomComputeSetOfPartialPostStates(
  Atm_Atom_t *      atom,
  Enum_VarInfo_t *  varInfo,
  Enum_State_t *    state,
  Enum_State_t *    partialState
)
  The function generates all possible augmentations of the partial state by
  executing the update guarded commands of the atom. If a guarded command does
  not update a variable, then its value is same as its value in state if it is
  read by the atom otherwise it is updated nondeterministically. If the atom
  is lazy or event appropriate post states are generated. Note that it is
  imperative for a lazy or event atom to read all its controlled variables.

  Side Effects: None

int
Enum_End(
  Tcl_Interp *      interp,
  Main_Manager_t *  manager
)
  The function terminates the enum package. It is called when mocha exits.

  Side Effects: None

int
Enum_Init(
  Tcl_Interp *      interp,
  Main_Manager_t *  manager
)
  The function registers all commands implemented by the enum package with the
  TCL interpreter. This function is called whenever mocha is started.

  Side Effects: The global TCL associative array mocha_commands is modified.

lsList
Enum_ModuleComputeSetOfInitialStates(
  Mdl_Module_t *    module,
  Enum_VarInfo_t *  varInfo
)
  The function returns the set of initial states of a module. The module
  should not have any external variables that are not boolean, event or
  enumerated type. If successful, the function returns a list of initial
  states, otherwise it returns NULL.

  Side Effects: None

lsList
Enum_ModuleComputeSetOfPostStates(
  Mdl_Module_t *    module,
  Enum_VarInfo_t *  varInfo,
  Enum_State_t *    state
)
  The function returns a list of successor states of state in module. The
  module should not have any external variables that are not boolean, event or
  enumerated types. If successful, the function returns a list of successor
  states, otherwise it returns NULL.

  Side Effects: None

void
Enum_ModulePerformBFS(
  Tcl_Interp *      interp,
  Main_Manager_t *  mainManager,
  Mdl_Module_t *    module,
  array_t *         invNameArray,
  array_t *         typedExprArray
)
  Currently, there could be a bug in this routine if transition invariants are
  being checked. No next states are generated if the histrory dependent part
  of the state has been encountered earlier in some other state and hence no
  transition invariant is checked also. For state invariants, this is fine but
  for transition invariants, satisfaction of an invariant by the transition
  <ps, ns> might depend on the history-free variables of ps. This needs to be
  worked out.

  Side Effects: If checkInvariant is TRUE, then the function changes the
  status of the unchecked invariants to either passed or failed.

void
Enum_ModulePerformDFS(
  Tcl_Interp *      interp,
  Main_Manager_t *  mainManager,
  Mdl_Module_t *    module,
  array_t *         invNameArray,
  array_t *         typedExprArray
)
  optional

  Side Effects: If checkInvariant is TRUE, then the function changes the
  status of the unchecked invariants to either passed or failed.

char *
Enum_PartialStatePrintToString(
  Enum_VarInfo_t *  varInfo,
  Enum_State_t *    partialState
)
  This function returns a string which contains the valuation of the variables
  in the given partial state.

  Side Effects: User should free the string after use.

int
Enum_Reinit(
  Tcl_Interp *      interp,
  Main_Manager_t *  manager
)
  Reinitializes the enum package.

  Side Effects: The state manager of the enum package is reset. All states are
  freed and the varInfo associated with all modules freed. The stateCounter is
  also reset to 0.

Enum_State_t *
Enum_StateAlloc(
  Enum_VarInfo_t *  varInfo
)
  The function allocates and returns a state. It initializes all variable
  values in the state to {LONG, INT}_MAX, which means that these variables are
  uninitialized. The parentState field is set to NULL.

  Side Effects: None

lsList
Enum_StateAssignAllVarCombinations(
  Enum_State_t *    state,
  lsList            varList,
  Enum_VarInfo_t *  varInfo
)
  The function takes as arguments a partial state and a variable list. The
  variables in varList should not have been assigned a value in state. All
  variables in varList should be of one of three types - Var_Boolean_c,
  Var_Enumerated_c or Var_Event_c. If successful, the function returns a list
  of states (possibly partial) that have the same value as state for all
  variables assigned to in state and all combinations of the values to the
  variables in varList.

  Side Effects: None

Enum_State_t *
Enum_StateDup(
  Enum_State_t *    state,
  Enum_VarInfo_t *  varInfo
)
  The function returnss a duplicate copy of state. It is the responsibility of
  the caller function to free the returned state. The parentState field is
  just copied from state.

  Side Effects: None

void
Enum_StateFreeEventVars(
  Enum_State_t *    state
)
  The function frees the event variables of a state and sets the field
  eventVars to NULL.

  Side Effects: None

void
Enum_StateFreeHistFreeVars(
  Enum_State_t *    state
)
  The function frees the history free variables of a state and sets the field
  histFreeVars to NULL.

  Side Effects: None

void
Enum_StateFree(
  Enum_State_t *    state
)
  The function frees all the internal memory of a state and the state itself.

  Side Effects: None

boolean
Enum_StateIsVariableAssigned(
  Enum_State_t *    state,
  Var_Variable_t *  var,
  Enum_VarInfo_t *  varInfo
)
  The function returns TRUE if var has been assigned a value, otherwise it
  returns FALSE.

  Side Effects: None

void
Enum_StateManagerAddVarInfo(
  Enum_StateManager stateManager,
  Mdl_Module_t *    module,
  Enum_VarInfo_t *  varInfo
)
  Adds varInfo of a module to the state manager.

  Side Effects: None

Enum_StateManager_t *
Enum_StateManagerAlloc(

)
  Allocates and initializes a state manager.

  Side Effects: None

void
Enum_StateManagerFree(
  Enum_StateManager stateManager
)
  The function frees all memory associated with a state manager, including all
  states and varInfo associated with every module.

  Side Effects: None

void
Enum_StateManagerIncrementStateCounter(
  Enum_StateManager stateManager
)
  This function increments the state counter in the state manager.

  Side Effects: Increments the state counter.

Enum_VarInfo_t *
Enum_StateManagerObtainVarInfoFromModule(
  Enum_StateManager stateManager,
  Mdl_Module_t *    module
)
  The function returns the varInfo of a module if it exists in the state
  manager. Otherwise it creates the Enum_VarInfo_t data structure, registers
  it with state manager and returns the new data structure.

  Side Effects: moduleToVarInfo hash table inside stateManager could be
  updated.

unsigned long
Enum_StateManagerReadStateCounter(
  Enum_StateManager stateManager
)
  This function returns the state counter in the state manager.

  Side Effects: None

Tcl_HashTable *
Enum_StateManagerReadStateNameTable(
  Enum_StateManager stateManager
)
  This function returns the state table in the state manager.

  Side Effects: None

char *
Enum_StateNameTableAddStateWithNameSuffix(
  Enum_StateManager stateManager,
  char *            moduleName,
  Enum_State_t *    state,
  char *            nameSuffix
)
  Add a state to the TclHashTable.

  Side Effects: return string has to be freed by user.

char *
Enum_StateNameTableAddState(
  Enum_StateManager stateManager,
  char *            moduleName,
  Enum_State_t *    state
)
  Add a state to the TclHashTable.

  Side Effects: return string has to be freed by user.

long
Enum_StateReadVariableValue(
  Enum_State_t *    state,
  Var_Variable_t *  var,
  Enum_VarInfo_t *  varInfo
)
  The function returns the value of var in state. Note that the function does
  not check if var has been assigned a value in state. It is the user's
  responsibility to make sure that he reads only a variable that has been
  assigned.

  Side Effects: None

void
Enum_StateSetParentState(
  Enum_State_t *    state,
  Enum_State_t *    parentState
)
  The function sets the parentState field of state. This field is used in
  producing a counterexample in case an invariant check fails.

  Side Effects: None

void
Enum_StateSetVariableValue(
  Enum_State_t *    state,
  Var_Variable_t *  var,
  Enum_VarInfo_t *  varInfo,
  long              value
)
  The value of the variable is set to value. Value is a number for boolean,
  integer or natural number variables. For symbolically enumerated variables,
  value is an index associated with the symbolic values of the variable.

  Side Effects: The old value of the variable is overwritten by the new value.

Enum_StateTable_t *
Enum_StateTableAlloc(
  int               power,
  Enum_VarInfo_t *  varInfo
)
  The function allocates and initializes a state table data structure with
  2^power number of buckets. The number of buckets in the state table is
  always a power of 2.

  Side Effects: None

Enum_StateTableEntry_t *
Enum_StateTableEntryAlloc(
  Enum_State_t *    state,
  Enum_StateTableEn next
)
  Allocates a state table entry data structure.

  Side Effects: None

void
Enum_StateTableEntryFree(
  Enum_StateTableEn entry
)
  This function frees a state table entry. Note that it does not free the
  state in the entry.

  Side Effects: None

void
Enum_StateTableFree(
  Enum_StateTable_t stateTable
)
  This function frees a state table and all the states in it.

  Side Effects: None

Enum_VarInfo_t *
Enum_VarInfoAlloc(
  Mdl_Module_t *    module
)
  Allocates the varInfo data structure of a module.

  Side Effects: None

void
Enum_VarInfoFree(
  Enum_VarInfo_t *  varInfo
)
  Frees a varInfo data structure.

  Side Effects: None

Var_Variable_t **
Enum_VarInfoReadEventVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the event variables.

  Side Effects: None

Var_Variable_t **
Enum_VarInfoReadHistDependVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the history dependent variables.

  Side Effects: None

Var_Variable_t **
Enum_VarInfoReadHistFreeVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the history free variables.

  Side Effects: None

int
Enum_VarInfoReadNumEventVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the number of event variables.

  Side Effects: None

int
Enum_VarInfoReadNumHistDependVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the number of history dependent variables.

  Side Effects: None

int
Enum_VarInfoReadNumHistFreeVars(
  Enum_VarInfo_t *  varInfo
)
  Returns the number of history free variables.

  Side Effects: None

