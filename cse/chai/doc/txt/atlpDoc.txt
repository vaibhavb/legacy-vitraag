The atlp package

Routines for parsing, writing and accessing ATL formulas.

Freddy Mang

**********************************************************************

Atlp_AgentAllocWithName()      Allocate an agent with its name only.

Atlp_AgentAlloc()              Allocates an agent.

Atlp_AgentFree()               Free an Agent structure.

Atlp_AgentIsAgentSet()         Set the isAgent flag of the agent

Atlp_AgentIsAgent()            Is this agent specified in the formula?

Atlp_AgentReadAtom()           Reads the atom of an agent.

Atlp_AgentReadName()           Reads the name of an agent.

Atlp_FileParseFormula()        Parses a file containing a set of ATL formulas.

Atlp_FlushStates()             Frees States field of Atlp_Formula_t
                               recursively

Atlp_FormulaArrayConvertToDAG()
                               Converts an array of ATL formulae to a multi-
                               rooted DAG.

Atlp_FormulaArrayConvertToExistentialFormTree()
                               Converts an array of ATL formulas to
                               existential form.

Atlp_FormulaArrayFree()        Frees an array of ATL formulas.

Atlp_FormulaConvertToExistentialForm()
                               Converts a ATL formula to existential form.

Atlp_FormulaConvertToString()  Returns formula as a character string.

Atlp_FormulaCreateWithAgents() Creates a ATL formula with the specified
                               fields.

Atlp_FormulaCreate()           Creates a ATL formula, without the list of
                               agents.

Atlp_FormulaDAGConvertToExistentialFormDAG()
                               Converts a DAG of ATL formulae to a DAG of
                               existential ATL   formulae.

Atlp_FormulaDup()              Duplicates a ATL formula.

Atlp_FormulaFree()             Frees a formula if no other formula refers to
                               it as a   sub-formula.

Atlp_FormulaObtainStates()     Gets a copy of the set of states for which this
                               formula is true.

Atlp_FormulaPrint()            Prints a formula to a file.

Atlp_FormulaReadAgentList()    Reads the agent list of a formula

Atlp_FormulaReadAtmExpr()      Reads the atmexpr in the formula

Atlp_FormulaReadByName()       Returns a pointer to the formula, given name.

Atlp_FormulaReadDebugData()    Returns the debug data associated with a
                               formula.

Atlp_FormulaReadLeftChild()    Gets the left child of a formula.

Atlp_FormulaReadLeft()         Read the left pointer of the formula

Atlp_FormulaReadOriginalFormula()
                               Returns original formula corresponding to
                               converted formula.

Atlp_FormulaReadRightChild()   Gets the right child of a formula.

Atlp_FormulaReadRight()        Read the right pointer of the formula

Atlp_FormulaReadType()         Gets the type of a formula.

Atlp_FormulaReadVariableName() Reads the variable name of a leaf formula.

Atlp_FormulaSetAgentList()     Stores the agentList with the formula

Atlp_FormulaSetAtmExpr()       Stores the atmExpr with the formula.

Atlp_FormulaSetDbgInfo()       Sets the debug information of a formula.

Atlp_FormulaSetStates()        Stores the set of states with the formula.

Atlp_FormulaTestIsConverted()  Returns TRUE if formula was converted, else
                               FALSE.

Atlp_FormulaTestIsQuantifierFree()
                               Returns TRUE if formula contains no path
                               quantifiers.

Atlp_Init()                    Init function for tcl.

Atlp_ManagerAlloc()            Allocate a atlp manager.

Atlp_ManagerFree()             Frees a atlp manager

Atlp_ManagerReadFormulaNames() Returns a list of Atl formula Names

Atlp_ManagerReadFormulas()     Returns an array of Atl Formula from the ATL
                               Manager

Atlp_ReadAtlpManager()         Export the Atlp Global Manager

**********************************************************************

This package implements a parser for ATL (Alternating-time   Temporal Logic)
formulas.  ATL is a language used to describe properties    of systems. For
the syntax of ATL formulas, refer to    <A HREF="../atlp/atlp/atlp.html"> the
ATL syntax manual</A>.

Atlp_Agent_t *
Atlp_AgentAllocWithName(
  char *            name
)
  This function allocates a new Atlp_Agent_t. Only the name is set, while all
  the other members are set to NIL.

  Side Effects: required

Atlp_Agent_t *
Atlp_AgentAlloc(
  char *            name,
  boolean           isAgent,
  Atm_Atom_t *      atom
)
  Allocates an agent structure, and initialize all its members.

  Side Effects: required

void
Atlp_AgentFree(
  Atlp_Agent_t *    agent
)
  It frees an agent structure.

  Side Effects: none

void
Atlp_AgentIsAgentSet(
  Atlp_Agent_t *    agent,
  boolean           value
)
  Sets the isAgent flag.

  Side Effects: none

boolean
Atlp_AgentIsAgent(
  Atlp_Agent_t *    agent
)
  This function returns TRUE if the agent specified is an agent, FALSE
  otherwise.

  Side Effects: none

Atm_Atom_t *
Atlp_AgentReadAtom(
  Atlp_Agent_t *    agent
)
  This function returns the atom of the agent.

  Side Effects: Do not free the atom.

char *
Atlp_AgentReadName(
  Atlp_Agent_t *    agent
)
  This function returns the name of the agent.

  Side Effects: Do not free the name.

lsList
Atlp_FileParseFormula(
  Atlp_Manager_t *  manager,
  FILE *            fp
)
  Parses a file containing a set of semicolon-ending ATL formulas, and returns
  an array of Atlp_Formula_t representing those formulas. If an error is
  detected while parsing the file, the routine frees any allocated memory and
  returns NULL.


void
Atlp_FlushStates(
  Atlp_Formula_t *  formula
)
  Frees States field of Atlp_Formula_t recursively


array_t *
Atlp_FormulaArrayConvertToDAG(
  array_t *         formulaArray
)
  The function hashes each subformula of a formula (including the formula
  itself) into a uniqueTable. It returns an array containing the roots of the
  multi-rooted DAG thus created by the sharing of the subformulae. It is okay
  to call this function with an empty array (in which case an empty array is
  returned), but it is an error to call it with a NULL array.

  Side Effects: A formula in formulaArray might be freed if it had been
  encountered as a subformula of some other formula. Other formulae in
  formulaArray might be present in the returned array. Therefore, the formulae
  in formulaArray should not be freed. Only formulaArray itself should be
  freed.

array_t *
Atlp_FormulaArrayConvertToExistentialFormTree(
  array_t *         formulaArray     of Atlp_Formula_t
)
  Calls Atlp_FormulaConvertToExistentialForm on each formula. It is okay to
  call this function with an empty array (in which case an empty array is
  returned), but it is an error to call it with a NULL array.


void
Atlp_FormulaArrayFree(
  array_t *         formulaArray     of Atlp_Formula_t
)
  Calls AtlpFormulaDecrementRefCount on each formula in formulaArray, and then
  frees the array itself.


Atlp_Formula_t *
Atlp_FormulaConvertToExistentialForm(
  Atlp_Formula_t *  formula
)
  Converts a ATL formula to existential form. That is, all universal path
  quantifiers are replaced with the appropriate combination of existential
  quantifiers and Boolean negation. Also converts "finally" operators to
  "until" operators.<p> Returns a new formula that shares absolutely nothing
  with the original formula (not even the strings). Also, the new formula does
  not have any MDDs associated with it. The "originalFormula" field of the
  returned formula is set to point to the formula passed as an argument. In
  addition, if the original formula is of type AG, AX, AU, AF, or EF, the
  "converted flag" is set. Returns NULL if called with a NULL formula.


char *
Atlp_FormulaConvertToString(
  Atlp_Formula_t *  formula
)
  Returns formula as a character string. All subformulas are delimited by
  parenthesis. The syntax used is the same as used by the ATL parser. Does
  nothing if passed a NULL formula.

  Side Effects: Atlp_ExprConvertToString

Atlp_Formula_t *
Atlp_FormulaCreateWithAgents(
  Atlp_FormulaType  type,
  void *            left,
  void *            right,
  lsList            agentList
)
  Allocates a Atlp_Formula_t, and sets the 2 fields given as arguments. If the
  type is Atlp_ID_c, then the left and right fields should contain a pointer
  to a variable name and a pointer to a value respectively. Otherwise, the two
  fields point to subformulas. refCount is set to 1. The states field is set
  to NULL, the converted flag is set to FALSE, and the originalFormula field
  is set to NULL.


Atlp_Formula_t *
Atlp_FormulaCreate(
  Atlp_FormulaType  type,
  void *            left,
  void *            right
)
  Equivalent to Atlp_FormulaCreateWithAgents(type, left, right, NIL(lsList)).


array_t *
Atlp_FormulaDAGConvertToExistentialFormDAG(
  array_t *         formulaDAG
)
  The function converts a DAG of ATL formulae to a DAG of existential ATL
  formulae. The function recursively converts each subformula of each of the
  formulae in the DAG and remembers the converted formula in the field states.
  It is okay to call this function with an empty array (in which case an empty
  array is returned), but it is an error to call it with a NULL array.


Atlp_Formula_t *
Atlp_FormulaDup(
  Atlp_Formula_t *  formula
)
  Recursively duplicate a formula. Does nothing if the formula is NIL. Does
  not copy mdd for states, dbgInfo.


void
Atlp_FormulaFree(
  Atlp_Formula_t *  formula
)
  The function decrements the refCount of the formula. As a consequence, if
  the refCount becomes 0, the formula is freed.


mdd_t *
Atlp_FormulaObtainStates(
  Atlp_Formula_t *  formula
)
  Gets a copy of the MDD representing the set of states for which this formula
  is true. It is the user's responsibility to free this MDD. If the set of
  states has not yet been computed, then a NULL mdd_t is returned. It is an
  error to call this function on a NULL formula.


void
Atlp_FormulaPrint(
  FILE *            fp,
  Atlp_Formula_t *  formula
)
  Prints a formula to a file. All subformulas are delimited by parenthesis.
  The syntax used is the same as used by the ATL parser. Does nothing if
  passed a NULL formula.


lsList
Atlp_FormulaReadAgentList(
  Atlp_Formula_t *  formula
)
  It returns the agent list specified in the formula.

  Side Effects: Should not free the list

Atm_Expr_t *
Atlp_FormulaReadAtmExpr(
  Atlp_Formula_t *  formula
)
  It returns the atmExpr in the formula.

  Side Effects: required

Atlp_Formula_t *
Atlp_FormulaReadByName(
  char *            name,
  Atlp_Manager_t *  manager
)
  This function returns a pointer to the formula with the given name. If the
  formula is not found, a NIL pointer is returned.

  Side Effects: required

void *
Atlp_FormulaReadDebugData(
  Atlp_Formula_t *  formula
)
  Returns the debug data associated with a formula. This data is uninterpreted
  by the atlp package.


Atlp_Formula_t *
Atlp_FormulaReadLeftChild(
  Atlp_Formula_t *  formula
)
  Gets the left child of a formula. User must not free this formula. If a
  formula is a leaf formula, NIL(Atlp_Formula_t) is returned.


Atlp_Formula_t *
Atlp_FormulaReadLeft(
  Atlp_Formula_t *  formula
)
  This function returns the left pointer of the formula. Should not free the
  pointer.

  Side Effects: required

Atlp_Formula_t *
Atlp_FormulaReadOriginalFormula(
  Atlp_Formula_t *  formula
)
  Returns original formula corresponding to converted formula.


Atlp_Formula_t *
Atlp_FormulaReadRightChild(
  Atlp_Formula_t *  formula
)
  Gets the right child of a formula. User must not free this formula. If a
  formula is a leaf formula, NIL(Atlp_Formula_t) is returned.


Atlp_Formula_t *
Atlp_FormulaReadRight(
  Atlp_Formula_t *  formula
)
  This function returns the left pointer of the formula. Should not free the
  pointer.

  Side Effects: required

Atlp_FormulaType
Atlp_FormulaReadType(
  Atlp_Formula_t *  formula
)
  Gets the type of a formula. See atlp.h for all the types. It is an error to
  call this function on a NULL formula.


char *
Atlp_FormulaReadVariableName(
  Atlp_Formula_t *  formula
)
  Reads the variable name of a leaf formula. It is an error to call this
  function on a non-leaf formula.


void
Atlp_FormulaSetAgentList(
  Atlp_Formula_t *  formula,
  lsList            agentList
)
  Sets the agentList field of the formula.

  Side Effects: It is an error to call this function with an NULL formula.

void
Atlp_FormulaSetAtmExpr(
  Atlp_Formula_t *  formula,
  Atm_Expr_t *      atmExpr
)
  Stores the atm_expr_t with the formula. This expression only occurs with
  atomic formulas. It is usually built during the semantic check of the
  formula, and it should freed (by calling Atm_ExprFreeExpression) once the
  states for this formula is built. It is an error to call this function with
  a NULL formula.

  Side Effects: required

void
Atlp_FormulaSetDbgInfo(
  Atlp_Formula_t *  formula,
  void *            data,
  Atlp_DbgInfoFreeF freeFn
)
  Sets the debug information of a ATL formula. The data is uninterpreted.
  FreeFn is a pointer to a function that takes a formula as input and returns
  void. FreeFn should free all the memory associated with the debug data; it
  is called when this formula is freed.


void
Atlp_FormulaSetStates(
  Atlp_Formula_t *  formula,
  mdd_t *           states
)
  Stores the MDD with the formula (a copy is not made, and hence, the caller
  should not later free this MDD). This MDD is intended to represent the set
  of states for which the formula is true. It is an error to call this
  function on a NULL formula.


boolean
Atlp_FormulaTestIsConverted(
  Atlp_Formula_t *  formula
)
  Returns TRUE if formula was converted from a formula of type AG, AX, AU, AF,
  or EF via a call to Atlp_FormulaConvertToExistentialFormTree or
  Atlp_FormulaConvertToExistentialFormDAG. Otherwise, returns FALSE.


boolean
Atlp_FormulaTestIsQuantifierFree(
  Atlp_Formula_t *  formula
)
  Test if a atl formula has any path quantifiers in it; if so return false,
  else true.


int
Atlp_Init(
  Tcl_Interp *      interp,
  Main_Manager_t *  manager
)
  It creates all the new tcl commands defined in this package. Also, it
  initialize the data structures used in this package.

  Side Effects: AtlpInitialize is called, and some global structures are
  allocated.

Atlp_Manager_t *
Atlp_ManagerAlloc(

)
  This function allocates the a new Atlp_Manager_t, and initialize the hash
  table in the manager.

  Side Effects: required

void
Atlp_ManagerFree(
  Atlp_Manager_t *  manager
)
  This function frees a Atlp_Manager_t, frees the names of the atl formula,
  and decrements the ref count of the formula. If the reference count of the
  formula comes to zero, the formula is freed.

  Side Effects: required

array_t *
Atlp_ManagerReadFormulaNames(
  Atlp_Manager_t *  manager
)
  Given an ATL Manager, this function returns an array of all the formula
  names.

  Side Effects: User should free the array after use. Note the content should
  not be freed.

array_t *
Atlp_ManagerReadFormulas(
  Atlp_Manager_t *  manager
)
  Given an ATL Manager this function returns a list of all the ATL formula
  from the manager.

  Side Effects: This creates an array, which should be freed after use. Beware
  that the formula should not be freed.

Atlp_Manager_t *
Atlp_ReadAtlpManager(

)
  This function exports the Atlp Global Manager to the calling function.
  Casual user should not free the manager.

  Side Effects: none

